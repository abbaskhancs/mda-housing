{
  "info": {
    "name": "MDA Housing API Collection",
    "description": "Complete API collection for MDA Housing system with all endpoints and demo users",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3001",
      "type": "string"
    },
    {
      "key": "adminToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "owoToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "bcaToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "housingToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "accountsToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "approverToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "applicationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "personId",
      "value": "",
      "type": "string"
    },
    {
      "key": "plotId",
      "value": "",
      "type": "string"
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{adminToken}}",
        "type": "string"
      }
    ]
  },
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Health check returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Health check returns OK status', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.eql('OK');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login as Admin",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"admin\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Admin login returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Admin login returns token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set('adminToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login as OWO Officer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"owo_officer\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('OWO login returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('OWO login returns token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set('owoToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login as BCA Officer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"bca_officer\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('BCA login returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('BCA login returns token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set('bcaToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login as Housing Officer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"housing_officer\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Housing login returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Housing login returns token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set('housingToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login as Accounts Officer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"accounts_officer\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Accounts login returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Accounts login returns token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set('accountsToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Login as Approver",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"approver\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Approver login returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Approver login returns token', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.exist;",
                  "    pm.collectionVariables.set('approverToken', jsonData.token);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Profile",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/profile",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "profile"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Profile returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Profile returns user data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.user).to.exist;",
                  "    pm.expect(jsonData.user.username).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Verify Token",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/auth/verify",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "verify"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Token verification returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Token is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.valid).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Workflow Lookups",
      "item": [
        {
          "name": "Get All Stages",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflow/stages",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "stages"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Stages endpoint returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Stages endpoint returns stages array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.stages).to.be.an('array');",
                  "    pm.expect(jsonData.stages.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Sections",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflow/sections",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "sections"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Sections endpoint returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Sections endpoint returns sections array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.sections).to.be.an('array');",
                  "    pm.expect(jsonData.sections.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Statuses",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflow/statuses",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "statuses"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Statuses endpoint returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Statuses endpoint returns statuses array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.statuses).to.be.an('array');",
                  "    pm.expect(jsonData.statuses.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Guards",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflow/guards",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "guards"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Guards endpoint returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Guards endpoint returns guards array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.guards).to.be.an('array');",
                  "    pm.expect(jsonData.guards.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get All Transitions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflow/transitions",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "transitions"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Transitions endpoint returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Transitions endpoint returns transitions array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.transitions).to.be.an('array');",
                  "    pm.expect(jsonData.transitions.length).to.be.greaterThan(0);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transitions from SUBMITTED",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflow/transitions/SUBMITTED",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "transitions", "SUBMITTED"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Transitions from SUBMITTED returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Transitions from SUBMITTED returns data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.fromStage).to.exist;",
                  "    pm.expect(jsonData.transitions).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transitions with Dry-Run (No Application)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflow/transitions?from=SUBMITTED&dryRun=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "transitions"],
              "query": [
                {
                  "key": "from",
                  "value": "SUBMITTED"
                },
                {
                  "key": "dryRun",
                  "value": "true"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Transitions with dry-run returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Transitions with dry-run returns transitions without guard results', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.transitions).to.be.an('array');",
                  "    pm.expect(jsonData.transitions[0]).to.not.have.property('guardResult');",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Applications",
      "item": [
        {
          "name": "Get All Applications",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/applications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Applications endpoint returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Applications endpoint returns applications array', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.applications).to.be.an('array');",
                  "    pm.expect(jsonData.pagination).to.exist;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Create New Application",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"sellerId\": \"{{personId}}\",\n  \"buyerId\": \"{{personId}}\",\n  \"plotId\": \"{{plotId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/applications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Get first person and plot IDs from database",
                  "pm.sendRequest({",
                  "    url: pm.collectionVariables.get('baseUrl') + '/api/workflow/stages',",
                  "    method: 'GET',",
                  "    header: {",
                  "        'Authorization': 'Bearer ' + pm.collectionVariables.get('adminToken')",
                  "    }",
                  "}, function (err, response) {",
                  "    if (err) {",
                  "        console.log('Error getting stages:', err);",
                  "    }",
                  "});"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Create application returns 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Create application returns application data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.application).to.exist;",
                  "    pm.expect(jsonData.application.id).to.exist;",
                  "    pm.collectionVariables.set('applicationId', jsonData.application.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Application by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/applications/{{applicationId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications", "{{applicationId}}"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Get application returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Get application returns application data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.application).to.exist;",
                  "    pm.expect(jsonData.application.id).to.eql(pm.collectionVariables.get('applicationId'));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Get Transitions with Dry-Run (With Application)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/workflow/transitions?from=SUBMITTED&applicationId={{applicationId}}&dryRun=true",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "transitions"],
              "query": [
                {
                  "key": "from",
                  "value": "SUBMITTED"
                },
                {
                  "key": "applicationId",
                  "value": "{{applicationId}}"
                },
                {
                  "key": "dryRun",
                  "value": "true"
                }
              ]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Transitions with dry-run and application returns 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Transitions with dry-run includes guard results', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.transitions).to.be.an('array');",
                  "    pm.expect(jsonData.application).to.exist;",
                  "    pm.expect(jsonData.transitions[0]).to.have.property('guardResult');",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Test Guard for Application",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"toStageId\": \"test-stage-id\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/workflow/applications/{{applicationId}}/guard-test",
              "host": ["{{baseUrl}}"],
              "path": ["api", "workflow", "applications", "{{applicationId}}", "guard-test"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Guard test returns 200 or 400', function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "",
                  "pm.test('Guard test returns guard result', function () {",
                  "    if (pm.response.code === 200) {",
                  "        const jsonData = pm.response.json();",
                  "        pm.expect(jsonData.guardResult).to.exist;",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Error Handling",
      "item": [
        {
          "name": "Unauthorized Request",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/applications",
              "host": ["{{baseUrl}}"],
              "path": ["api", "applications"]
            }
          },
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "pm.request.headers.remove('Authorization');"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Unauthorized request returns 401', function () {",
                  "    pm.response.to.have.status(401);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Invalid Route",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/api/invalid-route",
              "host": ["{{baseUrl}}"],
              "path": ["api", "invalid-route"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Invalid route returns 404', function () {",
                  "    pm.response.to.have.status(404);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-setup demo data if not already set",
          "if (!pm.collectionVariables.get('personId')) {",
          "    // This would need to be set manually or via a setup request",
          "    console.log('Please run the setup requests first to get person and plot IDs');",
          "}"
        ]
      }
    }
  ]
}
